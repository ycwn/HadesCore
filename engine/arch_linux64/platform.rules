
######################################################
#
# Platform specific parts for 64-Bit GNU/Linux
#


cc = clang
dc = ldc2
ld = ldc2

cflags  = -O0 -g -MMD -MP -Wno-initializer-overrides -Werror=implicit-function-declaration -Werror=incompatible-pointer-types -Werror=int-conversion -Werror=format
dflags  = -O0 -g
ldflags = -L-g
libs    =

export lib_targets =
export lib_src     = engine/libs
export lib_dst     = build/libs

include engine/arch_linux64/libSDL2.rules
include engine/arch_linux64/libportaudio.rules
include engine/arch_linux64/libzlib.rules
include engine/arch_linux64/libSTB.rules
include engine/arch_linux64/libvectorial.rules


bin    = build/hades
objs_a = $(autosrc:build/%.c=build/%.o)
objs_c = $(patsubst source/%.c,build/obj/%.o,$(filter %.c,$(source)))
objs_d = $(patsubst source/%.d,build/obj/%.o,$(filter %.d,$(source)))
deps   = $(objs_c:%.o=%.d)

-include $(deps)


mkdirs: $(source)
	mkdir -p $(sort $(dir $(objs_c) $(objs_d)))


platform-pre: mkdirs $(lib_targets)

platform-post:

platform-build: $(bin)

platform-pack:

platform-clean:
	rm -f $(bin)
	rm -f $(objs_a) $(objs_c) $(objs_d) $(deps)


$(bin): $(objs_a) $(objs_c) $(objs_d)
	$(ld) $^ -L-Lbuild/libs $(ldflags) $(libs:%=-L-l%) -of=$@

$(objs_a): build/%.o: build/%.c
	$(cc) $(cflags) -c $< -o $@

$(objs_c): build/obj/%.o: source/%.c
	$(cc) -Ibuild/libs/include -Isource/ $(cflags) -c $< -o $@

$(objs_d): build/obj/%.o: source/%.d
	$(dc) $(dflags) -c $< -of=$@

