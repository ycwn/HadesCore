
  Geometry File Format
------------------------


#define GEOMETRY_MAGIC  0x006f6567   // 'geo\0'

#define CHUNK_DRAWCALL  0x77617264  // 'draw'
#define CHUNK_FORMI     0x69746d66  // 'fmti'
#define CHUNK_FORMV     0x76746d66  // 'fmtv'
#define CHUNK_INDICES   0x78646e69  // 'indx'
#define CHUNK_STRINGS   0x73727473  // 'strs'
#define CHUNK_TEXT      0x74786574  // 'text'
#define CHUNK_VERTICES  0x78747276  // 'vrtx'

#define VF_V2  0x0000  // 2D Vertex coordinates
#define VF_V3  0x0001  // 3D Vertex coordinates
#define VF_T2  0x0002  // 2D Texture coordinates
#define VF_T3  0x0006  // 3D Texture coordinates
#define VF_C3  0x0008  // RGB vertex colors
#define VF_Q4  0x0010  // 4D tangent space quaternion
#define VF_X2  0x0020  // Free parameters 0 and 1
#define VF_X4  0x0030  // Free parameters 2 and 3
#define VF_B2  0x0040  // Bone + Weight for bones 0 and 1
#define VF_B4  0x00c0  // Bone + Weight for bones 2 and 3
#define VF_B6  0x01c0  // Bone + Weight for bones 4 and 5
#define VF_B8  0x03c0  // Bone + Weight for bones 6 and 7

#define IF_USHORT  2  // Indices are unsigned shorts
#define IF_UINT    4  // Indices are unsigned ints


typedef int8_t   i8;
typedef int16_t  i16;
typedef int32_t  i32;
typedef int64_t  i64;

typedef uint8_t   u8;
typedef uint16_t  u16;
typedef uint32_t  u32;
typedef uint64_t  u64;

typedef half   f16;
typedef float  f32;
typedef double f64;

typedef s16 snorm16;
typedef u16 unorm16;
typedef u32 r11g11b10f;
typedef u32 r10g10b10a2;


struct geometry {

	u32 magic;   // GEOMETRY_MAGIC
	u32 chunks;

	struct chunk {

		u32 magic;
		u32 offset;
		u32 length;
		u32 padding;

	};

	struct chunk chunk[chunks];

};



struct drawcall { // chunk[n].magic == CHUNK_DRAWCALL

	u32 name;
	u32 shader;

	u32 start;
	u32 count;

	f32 minimum[4];
	f32 maximum[4];

	f32 albedo[4];
	f32 emission[4];

	f32 transparency;
	f32 metallicity;
	f32 roughness;
	f32 refraction;

	f32 args[20];

} drawcalls[];



struct index_format { // chunk[n].magic == CHUNK_FORMI

	u32 index_format;

} index_format;



struct vertex_format { // chunk[n].magic == CHUNK_FORMV

	u32 vertex_format;

} vertex_format;



struct index { // chunk[n].magic == CHUNK_INDICES

#if header::iformat == IF_USHORT
	u16 index;
#endif

#if header::iformat == IF_UINT
	u32 index;
#endif

} indices[];



struct text { // chunk[n].magic == CHUNK_TEXT

	u32 tag;
	u32 text;

} text;



struct vertex { // chunk[n].magic == CHUNK_VERTICES

	unorm16 x, y;

#if vertex_format & VF_V3
	unorm16 z, w;
#endif

#if vertex_format & VF_T2
	unorm16 s, t;
#endif

#if vertex_format & VF_T3
	unorm16 p, q;
#endif

#if vertex_format & VF_C3
	r11g11b10f rgb;
#endif

#if vertex_format & VF_Q4
	r10g10b10a2 ijk_h;  // vector component of quaternion + space handedness
#endif

#if vertex_format & VF_X2
	f16 x0, x1;
#endif

#if vertex_format & VF_X4
	f16 x2, x3;
#endif

#if vertex_format & VF_B2
	uint16  b0;
	unorm16 w0;
	uint16  b1;
	unorm16 w1;
#endif

#if vertex_format & VF_B4
	uint16  b2;
	unorm16 w2;
	uint16  b3;
	unorm16 w3;
#endif

#if vertex_format & VF_B6
	uint16  b4;
	unorm16 w4;
	uint16  b5;
	unorm16 w5;
#endif

#if vertex_format & VF_B8
	uint16  b6;
	unorm16 w6;
	uint16  b7;
	unorm16 w7;
#endif


} vertices[];

