

//import "samplers.conf"
//import "gbuffer-nvidia.conf"
/*
surface gbuffer_color {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	format { "r16g16b16a16-sfloat" }

}


surface gbuffer_depth {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	format { "r32-sfloat" }

}

surface shadowmap_depth {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	format { "r32-sfloat" }

}



surface gbuffer_blur {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	format { "r16g16-sfloat" }

}





surface gbuffer_normals {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	format { "r16g16-sfloat" }

}


surface depth {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	format {  // Try to use a 32-bit float depth buffer

		"d32-sfloat",
		"d32-sfloat-s8-uint",
		"d24-unorm-s8-uint"

	}

//	sampler none;

}


//surface R16G16B16A16 bloom_h;
//surface R16G16B16A16 bloom_v;

//surface R8 foo, bar, baz, quux;


renderpass depth_blur {

	priority -100;

	output gbuffer_depth: load:clear;
	output gbuffer_blur: load:clear;

}


renderpass scene_ambience {

	priority -100;

	input gbuffer_color, 0;
	input depth, 1;

	output gbuffer_color:
		load:clear;

	output gbuffer_color:
		load:clear(0.5, 1.0, 0.5, 0.0);

	output depth:
		load:preserve,
		store:ignore;

}


renderpass scene_prelighting {

	input gbuffer_depth, 0;
	input gbuffer_blur,  1;

	output shadowmap_depth: load:clear, store:preserve;


}


renderpass scene_lighting {

	input gbuffer_color,   0;
	input gbuffer_normals, 1;

	output gbuffer_color: store:preserve;

}


renderpass compositor {

	input gbuffer_color, 0;

	output framebuffer: load:clear(0.0, 0.0, 0.0, 0.0);
	output depth:       load:preserve, store:ignore;

}

*/



surface depth {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	format {  // Try to use a 32-bit float depth buffer

		"d32-sfloat",
		"d32-sfloat-s8-uint",
		"d24-unorm-s8-uint"

	}

//	sampler none;

}


renderpass ambience {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	output framebuffer: load:clear(0.0, 0.0, 0.0, 0.0), store:preserve;
	output depth:       load:clear(1.0),                store:preserve;

}


renderpass postprocess {

	width  SCREEN_WIDTH;
	height SCREEN_HEIGHT;

	output framebuffer: load:preserve, store:preserve;
	output depth:       load:preserve, store:preserve;

}


shader "scanline.spirv";
shader "suzanne.spirv";
